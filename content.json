{"meta":{"title":"Yuuki's blog","subtitle":"subtitle","description":"CyberSec | WebSec | Blog","author":"yuuki","url":"https://blog.uuki.moe","root":"/"},"pages":[{"title":"","date":"2023-05-28T11:50:14.124Z","updated":"2023-05-28T11:50:14.124Z","comments":true,"path":"404.html","permalink":"https://blog.uuki.moe/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"About","date":"2023-05-28T11:50:14.123Z","updated":"2023-05-28T11:50:14.123Z","comments":true,"path":"about/index.html","permalink":"https://blog.uuki.moe/about/index.html","excerpt":"","text":""},{"title":"Links","date":"2023-05-28T11:50:14.126Z","updated":"2023-05-28T11:50:14.125Z","comments":true,"path":"friends/index.html","permalink":"https://blog.uuki.moe/friends/index.html","excerpt":"","text":""},{"title":"Tags","date":"2023-05-28T11:50:14.124Z","updated":"2023-05-28T11:50:14.124Z","comments":true,"path":"tags/index.html","permalink":"https://blog.uuki.moe/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2023-05-28T11:50:14.131Z","updated":"2023-05-28T11:50:14.131Z","comments":true,"path":"categories/index.html","permalink":"https://blog.uuki.moe/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2023-05-27T16:00:00.000Z","updated":"2023-05-28T12:49:15.000Z","comments":true,"path":"2023/05/28/hello-world/","link":"","permalink":"https://blog.uuki.moe/2023/05/28/hello-world/","excerpt":"Welcome to my blog. 👋 这是第一个帖子, 记录了这个站点的诞生。","text":"Welcome to my blog. 👋 这是第一个帖子, 记录了这个站点的诞生。 TimeLog 2023-05-28编辑文章, 发布博客 (https://uuki.blog.moe)2023-05-29补充集成 Obsidian 部分内容2023-05-30关闭光标样式...custom_css: cursor: enable: false...关闭平滑滚动...scroll_smooth: false... 1. 初始化 Hexo blog## 初始化cd ~/bloghexo initgit init .## 安装主题# https://github.com/volantis-x/hexo-theme-volantis/git submodule add https://github.com/volantis-x/hexo-theme-volantis.git themes/volantiscp themes/volantis/_config.yml ./_config.volantis.yml 修改主题配置文件_config.volantis.yml+ 131 - navbar: # 导航栏- 171 - cover: # 头图+ 214 - pages: # 友链页面配置+ 387 - comments: # 评论+ 563 - sidebar: # 侧边栏+ 728 - site_footer: # 页脚+ 817 - plugins: # 插件+ 1053 - rightmenus: # 右键菜单 安装拓展插件## 音乐播放器# https://aplayer.js.org/#/zh-Hans/npm install aplayer --save## Hexo 搜索# https://github.com/alexbruno/hexo-generator-json-contentnpm install hexo-generator-json-content --save## Highlight# https://highlightjs.org/static/demo/# https://www.jsdelivr.com/package/npm/@highlightjs/cdn-assets?path=styles&amp;tab=files暂时没有启用, 而是使用 Hexo 内置的 Highlight## RSSnpm install hexo-generator-feed --save本地文件 atom.xml 会存在乱码, 部署到远程就没问题了## Deploy# https://github.com/hexojs/hexo-deployer-gitnpm install hexo-deployer-git --save 元数据盒子各种首页的 Front-matter about/index.mdlayout: docsindex: truetitle: Abouttop_meta: falsebottom_meta: falsesidebar: [] categories/index.mdlayout: categoryindex: truetitle: Categoriestop_meta: falsebottom_meta: falsesidebar: [] tags/index.mdlayout: tagindex: truetitle: Tagstop_meta: falsebottom_meta: falsesidebar: [] friends/index.mdlayout: friendsindex: truetitle: Linkstop_meta: falsebottom_meta: falsesidebar: [] 2. 集成 Obsidian注意, 使用 Obsidian 打开 hexo 博客根目录作为仓库, 而不是 _posts 或其他路径 本地保存图片 Custom Attachment Location: https://github.com/RainCat1998/obsidian-custom-attachment-location 参考如下参数进行配置 Location for New Attachments: source/assets/$&#123;filename&#125; Pasted Image Name: image-$&#123;date&#125; Date Format: YYYYMMDD_HHmmssSSS Automatically rename attachment folder: 打开 Automatically rename attachment files: 打开 直接在 Obsidian 内粘贴图片即可自动将图片保存在本地, 文件路径对应为 source/assets/Markdown文件名称/image-时间戳 创建文章模板 Templater: https://silentvoid13.github.io/Templater/ 创建模板文件 cd ~/blogmkdir template ## template/post.mdtitle: &lt;% tp.file.title %&gt;date: &lt;% tp.date.now(&quot;YYYY-MM-DD HH:mm:ss&quot;) %&gt;author: Yuukiupdated: cover: tags: [&lt;% tp.system.prompt(&quot;Tag&quot;, &quot;&quot;) %&gt;]categories: [&lt;% tp.system.prompt(&quot;Category&quot;, &quot;&quot;) %&gt;]## template/timeNow.md&lt;% tp.date.now(&quot;YYYY-MM-DD HH:mm:ss&quot;) %&gt;## template/title.md&lt;% tp.file.title %&gt; 修改配置文件 设置模板文件夹: General Settings -&gt; Template folder location: template 勾选 Enable Folder Templates: 允许指定目录的文件在新建时自动调用模板 配置文件选择 Folder Templates -&gt; Add New: Folder&#x3D;source/_posts, Template&#x3D;template/post.md 指示 _posts 目录下的文件在新建时自动调用 post.md 模板文件 可视化管理文章 MAKE.md https://github.com/Make-md/makemd 注意, 插件在管理文件源属性时将 tag 作为标签管理, 与 Hexo 冲突, 需要进入插件配置页面, 找到 Context -&gt; 取消勾选 Contexts 创建自定义空间 Archive 用于管理 _posts 目录下的所有文章 像是本篇文章的 Front-matter 原属性内包含的 categories=dev (分类) 和 tags=blog (标签), 都可以作为 MAKE.md 插件的分许一句, 在创建空间时, 选择 New Smart Space 可以实现对不同分类或不同标签的文章进行单独的管理。 清理无用附件Plan A: 依赖于 File Cleaner 插件 因为这个插件默认检索全仓库, 需要多加一点规则避免删除有用的文件 在删除之后, 右上角会弹窗提示, 如果有意外情况记得在清空废纸篓之前手动检查 Excluded Foldersnode_modules/scaffolds/template/themes/ Plan B: 使用 Find orphaned files and broken links 插件 Find orphaned files and broken links 是一个可以用于发现空文件, 没有链接的文件的插件。 配置要更加复杂, 我也没有采用这种方案 3. Hexo 半自动化部署半自动化脚本 (Shell)基于 MacOS 操作系统 ./hexo status # 判断运行状态./hexo restart # 重新启动./hexo start # 启动./hexo stop # 停止./hexo deploy # 部署至 GitHub 编写 bash 脚本用于自动化操作 hexo hexo.sh#!/bin/bash# 检查 hexo 进程状态function check_status() &#123; if ps aux | grep hexo | grep -v grep | grep -v hexo.sh &gt;/dev/null; then pid=$(ps aux | grep hexo | grep -v grep | grep -v hexo.sh | awk &#x27;&#123;print $2&#125;&#x27;) echo &quot;Hexo server is running [$pid]&quot; else echo &quot;Hexo server is not running...&quot; fi&#125;# 终止 hexo 进程function stop_hexo() &#123; if ps aux | grep hexo | grep -v grep | grep -v hexo.sh &gt;/dev/null; then pid=$(ps aux | grep hexo | grep -v grep | grep -v hexo.sh | awk &#x27;&#123;print $2&#125;&#x27;) echo &quot;Hexo server is running [$pid]&quot; kill $pid echo &quot;Hexo server is stoped...&quot; else echo &quot;Hexo server is not running...&quot; fi&#125;# 重启 hexo 进程function restart_hexo() &#123; stop_hexo start_hexo&#125;# 启动 hexo 进程function start_hexo() &#123; if ps aux | grep hexo | grep -v grep | grep -v hexo.sh &gt;/dev/null; then echo &quot;Hexo is running...&quot; else hexo server &amp; pid=$(ps aux | grep hexo | grep -v grep | grep -v hexo.sh | awk &#x27;&#123;print $2&#125;&#x27;) echo &quot;Hexo is running... [$pid]&quot; fi&#125;# 部署 hexo 到 GitHubfunction deploy_hexo() &#123; hexo clean hexo deploy&#125;# 根据命令行参数执行对应的操作case $1 in &quot;status&quot;) check_status ;; &quot;stop&quot;) stop_hexo ;; &quot;restart&quot;) restart_hexo ;; &quot;start&quot;) start_hexo ;; &quot;deploy&quot;) deploy_hexo ;; *) echo &quot;使用方法: $0 [status|stop|restart|start|deploy]&quot; exit 1 ;;esac 集成 Shell command 依赖于 Shell command 插件 顶部导航栏选择 Environments 下方找到 Add directories to the PATH environment variable, 为 hexo 命令添加环境变量 Shell command 详细配置参考下面的图片 👇🏻 这里需要将命令中顶部导航栏 Output -&gt; Output channel for stdout 设置为 Notification balloon 使用方法: Command + P 打开命令面板, 输入 hexo server, 回车后键入对应操作即可。也可以搭配 Commander 插件, 在左侧创建按钮更方便的管理。","categories":[{"name":"dev","slug":"dev","permalink":"https://blog.uuki.moe/categories/dev/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://blog.uuki.moe/tags/blog/"}],"author":"Yuuki"}],"categories":[{"name":"dev","slug":"dev","permalink":"https://blog.uuki.moe/categories/dev/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://blog.uuki.moe/tags/blog/"}]}